from flask import Flask, jsonify, request, redirect, url_for, render_template, flashfrom helpers import get_valid_user_or_abort, get_valid_movie_or_abortfrom data_manager import DataManagerfrom models.models import db, Moviesfrom sqlalchemy.exc import SQLAlchemyErrorimport requestsimport osfrom dotenv import load_dotenvload_dotenv()app = Flask(__name__)app.secret_key = os.getenv('KEY_FLASH')basedir = os.path.abspath(os.path.dirname(__file__))app.config['SQLALCHEMY_DATABASE_URI'] = f"sqlite:///{os.path.join(basedir, 'data/movies.db')}"app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = Falsedb.init_app(app)  # Link the database and the app. This is the reason you need to import db from modelsdata_manager = DataManager(db) # Create an object of your DataManager classdef get_omdb_url(title):    KEY = os.getenv('KEY')    return f"http://www.omdbapi.com/?t={title}&apikey={KEY}"@app.route('/', methods=['GET'])def index():    users = data_manager.get_users()    return render_template('index.html', users=users)@app.route('/users', methods=['POST'])def add_user():    name = request.form['name']    if not name or name.strip() == "":        flash('Please enter a valid username.', 'add_user_error')        return redirect(url_for('index'))    else:        try:            data_manager.create_user(name)            return redirect(url_for('index'))        except SQLAlchemyError:            flash('There was a database error. Please try again.', 'db_error')            return redirect(url_for('index'))@app.route('/users/<int:user_id>/movies', methods=['GET'])def list_favourite_movies(user_id):    user = get_valid_user_or_abort(data_manager, user_id)    movies = data_manager.get_favourite_movies(user_id)    return render_template('movies.html', movies=movies, user_id=user_id, user=user)@app.route('/users/<int:user_id>/movies', methods=['POST'])def add_favourite_movie(user_id):    user = get_valid_user_or_abort(data_manager, user_id)    title = request.form['title']    if not title or title.strip() == "":        flash('Please type in existing film title.', 'add_movie_error')        return redirect(url_for('list_favourite_movies', user_id=user_id))    else:        omdb_url = get_omdb_url(title)        try:            response = requests.get(omdb_url)            response.raise_for_status()  # wirft HTTPError bei schlechten Statuscodes            data = response.json()        except requests.RequestException:            flash('There was a problem connecting to the OMDb API.', 'add_movie_error')            return redirect(url_for('list_favourite_movies', user_id=user_id))        if data.get('Response') == 'False':            flash('No movie found with that title.', 'add_movie_error')            return redirect(url_for('list_favourite_movies', user_id=user_id))        director = data.get('Director', 'NA/')        year = data.get('Year', 'N/A')        poster_url = data.get('Poster', 'IMAGE N/A')        try:            data_manager.add_movie(title, director, year, poster_url, user_id)            return redirect(url_for('list_favourite_movies', user_id=user_id))        except SQLAlchemyError:            flash('There was a database error. Please try again.', 'db_error')            return redirect(url_for('list_favourite_movies', user_id=user_id))@app.route('/users/<int:user_id>/movies/<int:movie_id>/update', methods=['POST'])def update_movie_title(user_id, movie_id):    user = get_valid_user_or_abort(data_manager, user_id)    movie = get_valid_movie_or_abort(data_manager, movie_id)    new_title = request.form['title']    if not new_title or new_title.strip() == "":        flash('Please type in valid movie title for update.', 'update_title_error')        return redirect(url_for('list_favourite_movies', user_id=user_id))    else:        try:            data_manager.update_movie(movie_id, new_title)            return redirect(url_for('list_favourite_movies', user_id=user_id))        except SQLAlchemyError:            flash('There was a database error. Please try again.', 'db_error')            return redirect(url_for('list_favourite_movies', user_id=user_id))@app.route('/users/<int:user_id>/movies/<int:movie_id>/delete', methods=['POST'])def delete_favourite_movie(user_id, movie_id):    user = get_valid_user_or_abort(data_manager, user_id)    movie = get_valid_movie_or_abort(data_manager, movie_id)    try:        data_manager.delete_movie(movie_id)        return redirect(url_for('list_favourite_movies', user_id=user_id))    except SQLAlchemyError:        flash('There was a database error while deleting the movie. Please try again.', 'delete_movie_error')        return redirect(url_for('list_favourite_movies', user_id=user_id))@app.errorhandler(404)def page_not_found(e):    return render_template('404.html'), 404@app.errorhandler(500)def page_not_found(e):    return render_template('500.html'), 500if __name__ == '__main__':  with app.app_context():    db.create_all()  app.run(port=5001)